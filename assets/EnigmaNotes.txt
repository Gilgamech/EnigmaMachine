
27%26 = 1 (Long division illustration of modulus)

Math.floor(27/26) = 1

Math.floor(Math.floor(676/26)/26) = 1


> enigmaForward("CATJAR",wheelAKeyArray,wheelASwapArray,1)
'HHCHVU'
> enigmaReciprocal('HHCHVU',hubKeyArray,hubSwapArray)
'UUPUIH'
> enigmaReverse('UUPUIH',wheelAKeyArray,wheelASwapArray,1)
'QHCTMD'

> enigmaForward("QHCTMD",wheelAKeyArray,wheelASwapArray,1)
'UUPUIH'
> enigmaReciprocal('UUPUIH',hubKeyArray,hubSwapArray)
HHCHVU
> enigmaReverse("HHCHVU",wheelAKeyArray,wheelASwapArray,1)
CATJAR


{f165}
P 5.5(f0)
47 dl 1.6(7.8)
215 l 7.2(13.4)
4.6(4.13) 2/9

L 6(f15)
14 dl 4.7(10.9)
16 d 5.3(11.5)
1 +- 1
6.2(f21)


Y 10(f135)
64? dl 1.6(12.3)
64 l 2.1(12.8)
1 +- 5

Z 10.5(f150)
64? ur 1.7(12.4)
64 r 2.1(12.8)
1 +- 5
10.7(f156)


One of the real oddities of Enigma machines was that every so often, the wheels could rotate into positions that make them output a lower-version of the Enigma cipher, which would be decipherable by a previous-version machine. 


		(Trombone undertones)
Title: Marion Radjewski and The Enigma Machine
To my remember Polish heritage, and because the Enigma machine is a popular historical landmark, I wanted honor to a great Pole, Marion Radjewski, who reverse engineered the Engima machine before the start of WW2. 
Part 1: Present of Future Past - About Enigma

		In 1923, Berlin's Cipher Machine AG released their Trade Machine, an electromechanical cipher typewriter where you would type in the encrypted message, and it would type out the decrypted message. 
		It was the first Enigma machine. A year later, they would develop the 2-wheel, smaller, portable Enigma-A "military machine", which was small enough to be put into a soldier's backpack and used in the field - this was a "Glow lamp cipher machine". It was a simplified version of the Trade Machine, with the tradeoff was that this device couldn't type out the translations onto paper, and instead used a panel with 26 lightbulbs to display the output letter. Also you had to press the "drive button" to rotate the cipher wheels, between each keypress. Lastly, this 2-wheel "military machine" used a different version of Enigma than the 4-wheel Trade Machine.
		
		The Swedish General Staff (SGS) tested both the Trade Machine and Enigma-A, and requested some improvements: a Test All Lamps function, printed letters on panel and keyboard, bright letters with a dark background for the panel, move the drive button to the left side, upgrade from 26 alphabet characters to at least 40 characters (including numbers and punctuation), and upgrade the 2-wheel Enigma-A to 4 wheels (like the Trade Machine). These upgrades were made in Enigma-B, which originally did have 4 moving wheels, as the reversing roller was moveable. Later Enigma-B models had a fixed reversing roller. 

		The keyboard 

		The keyboard wasn't the QWERTY that you probably have on your device - it's a QWERTZ, with P moved next to Z, and L moved down next to M, to move the 26 letters from a 10-9-8 pattern common for QWERTY keyboards into a 9-8-9 pattern. Then Y and Z were swapped.

						Image of keyboard

		The wheel ciphers are named based on the direction the message is going through the wheel - forward toward the hub, or reflected back through the wheels. The function names reflect their function:

						Image of enigmaMachine

		The front panel resembled a telephone switchboard, and manually swapped 2 letters. This is just like running replace on a string, but twice and using a swap character. The swap character here is a combination of symbols that's very rare to see together.

						Image of enigmaReciprocal


		Front panel is a reciprocal cipher, reversing roller is a hard-wired reciprocal cipher, and wheels are two-sided ciphers.

		(Drawing of wheel)
		Cipher wheels A, B, and C replace letters in a different way than the front panel or hub, which can't be changed without disassembling the wheel. The wheels were removable, and each day would have a different set of 3 wheels from the box of like 12 wheels. If you forgot to update your wheels in the morning, you'd only see scrambled messages.

		(Math illustrations)
		Wheel A's wheel modulus is the message index modulus 26, changing the modifier for every letter with every keypress. 
						27%26 = 1 (Long division illustration of modulus)
		You might know about the modulus - it performs long division, takes the remainder, and throws the rest in the trash.
		Wheel B's wheel modulus is the message index divided by 26, rounded down - changing the letter with every cycle of Wheel A. 
						Math.floor(27/26) = 1
		Wheel C's wheel modulus is likewise message index divided by 26, rounded down, then divided by 26 and rounded down again. 
						Math.floor(Math.floor(676/26)/26) = 1
		The reversing roller was functionally very similar to the front panels, but wasn't modifiable during normal use. Except on the Enigma1 and later, whose a rewirable hub performs the same task as the front panel - reversably swap 2 letters. But instead of being rewired daily, it was only rewired once a week. 

		Then revert the process of Wheels C, B, and A - followed by reverting the front panel. 

						(Image of enigmaReciprocal)

		Even though the wheel forward and reverse functions are not reciprocal, the overall process *is* reciprocal. This allows a standard machine configuration to be declared, and the same settings to encrypt and decrypt all messages, very useful for military uniformity. To demonstrate this, we start with a simplified model, where the message will be passed through an empty front panel, one wheel forward, the hub, one wheel reverse, and the empty panel again:

		Cipher wheels A, B, and C swap 2 letters like the front panel, but this wasn't changeable without rewiring the wheel. The wheels were removable, but usually left in place. Cipher Machine AG could make custom wheels when requested.
		Wheel A's index is incremented with every 1 keystroke. 
		Wheel B's index is the message index divided by 26, rounding down. 
		Wheel C's index is likewise the message index divided by 26, rounding down, and this divided by 26, rounding down again. This increments only once every 676 letters, and so might only increment once or twice during the typical message.
		"Wheel" D would increment every 17576 letters, so likely never incremented, even on the longest of messages. To put it in perspective, a page holds about 1800 characters and spaces, so this is almost 10 pages of typewritten text, or up to 25 handwritten pages. These messages were transmitted one letter at a time, telegraphed over radio waves in Morse's Telegraph Code. Even if you were a brilliant telegraph operator, typist, and scribe - and could translate a Morse Code signal to Roman letters,  press one Enigma key, and write down the letter that lit up on a pad of paper - at a rate of 1 letter per second, it would take almost 5 hours to receive a message that long. Much as Andrew S. Tanenbaum would later say, it would be faster to send this 10 page essay by military courier than telegraph - indeed one courier on a motorcycle could carry a whole box and inform 50 command posts in an hour.


Part 2: Wheel Boogaloo - Cracking Enigma
How did Marion crack Enigma? 
The Polish Cipher Bureau bought a commercial Enigma-K machine from Cipher Machine AG, which was sold internationally - this let the Polish Cipher Bureau decrypt the German army's rail logistics reports, which was a huge first step. Then they got the German Army's manual (a few typewriter pages stapled together) from French Intel, who bought it from spy. This told them about the front panel and the rewirable rolling reflector. Similar to SSL, just having the public key doesn't let you decrypt a message, but instead gives you a starting point to do a bunch of math. The starting point is important, because it greatly reduces the enormous amount of math that needs to be done. So while he had some decryption in progress, most of it would need to wait for Alan Turing to develop the a Bombe wheel, which could perform this 

Enigma was an electromechanical cipher - more complex than human-performable ciphers like Running Key, but much simpler than full-electronic ciphers like SSL. A human could perform it, but it would take long enough that the message would no longer be important.


The reversing roller resembled a wheel, but couldn't move. This is why most videos on Enigma machines say they upgraded from 3 wheels to 4, even though the 4th wheel would never realistically rotate. First, the rotating reflector looked like a wheel and was adjustable like one, but had no drive gearing. Second, their navy kept driving cryptographic innovation 
 an "extra wheel" machine used by their navy, but this used a special narrower extra wheel, with spring-loaded contacts, and couldn't be picked from the navy's 8 wheels. Also, in its A position, it produced the inferior 3-wheel Enigma version used by the army's Enigma1 and M3. Also, it did not move when the keys were pressed, like the rolling reflector. These would have a new setting once a month.



Enigma1 had 2 key processes - first was configuring the wheels and reflector. Each machine shipped with 5 wheels, of which 3 at a time could be used. 
The first step was opening the top lid, releasing the rolling reflector, and removing the wheels. 
Second, find today's 3 wheels and on each, push down the spring pin and rotate the wheel to today's index. Do the same for the rolling reflector. This basically adds an extra static index rotation to the dynamic index rotation generated at message input. Another way to look at this is that it helped to further randomize the operator keys sent at the beginning of each transmission - key settings "10, 24, 2" from yesterday would not match "10, 24, 2" today - instead they may match "19, 9, 12" or another triplet. 
An extra optional step was rewiring the rolling reflector, which had to be done every 10 days by German Naval encryptors. The German Navy kept upgrading their Enigma machines far beyond the German Army and Air Force. 
Third, put the 3 wheels onto the spindle in order, and replace it within the machine, and lock the wheels and rolling reflector. 
Fourth, close the top panel and open the front panel, then unplug all the patch cables before replugging them according to today's combinations. The machine was now configured in the same way as all other Enigma machines, to receive today's transmissions.
The second process was rotating the wheels to match the 3 numbers or letters at the start of the message, which would set up your Enigma machine. Since Enigma was a reciprocal cipher, setting up both machines in the same way would let one machine decrypt messages encrypted by the other machine. This had to be done foreach message. Not sure how operators chose numbers - if they had to carry dice, or just try not to use the same numbers often? 

Unlike the Enigma1, Marion's Enigma-K didn't have a front patch panel. The German Military was using a variety of Enigma machines, and while the more advanced Enigma1 was in use on the front lines, other parts (such as the railway and Italian Navy) used the internationally-available Enigma-K (commercial) model. 

Part 3 Interlude - Running Man.
		Enigma requires a key in the form of the wheels-of-the-day and their specific settings for this transmission, along with the front panel settings. These were sent in the first 12 characters of a message, aiding decryptors. 
		However, using both Running Key and my Inverse Running key will encrypt both halves of a message - first half first, then the last half, because that's how my function was written. This allows for keyless encryption, since the message is encrypted with itself.

		Running Key uses the first half of the message as the key with which 


Part 4 - Be Kind, Rewind - Javascript Enigma.
The work I'll be describing in this video was performed in Javascript. How hard was it? Pretty easy - about 75 lines of code in 4 functions. So let me take you on the fantastic voyage of its construction.
		To do this in Javascript, the same function can be used for both the front panel and the hub, while the wheels need both a forward encryption function to simulate passing through the wheels toward the hub, and a reverse function to simulate passing back through the wheels after the hub. In Part 2 I'll demonstrate with a simplified model that - even though the individual parts are not reciprocal, they work together to form a reciprocal cipher.
		Just like the extemporaneous wiring by the front patch cables, the internal wiring of the wheels connected each input connector with its own output connector. And just like we did for the front panel, we simulate that wiring with basically the same key and swap arrays. In this example, the 3 pairs of wheel key and swap arrays each consist of half an alphabet, but it should be possible to extend each of these to a full alphabet and increase the entropy somewhat.
		To build this in Javascript, the same function could be used foreach of the ciphers, and the reversion function could be used foreach of the reversions. Just change the input alphabet. Since this function could take up to 13 characters, the sets of characters to swap are represented by 2 equal-length arrays: keyArray and swapArray. The first letter in keyArray will swap with the first in swapArray, and so forth.


		Here is a breakdown of the rewritten functions. The message goes through enigmaForward on the first pass, then enigmaReverse on the second.

		enigmaForward
		This function starts much like the rest - uppercase the input string. Also grab the key array length since it's used often. These are using the keyArrays and swapArrays defined in yesterday's blog.
		Foreach letter in the message, determine the indexAdvance (Enigma's secret sauce) by dividing the index by the wheelModulus - this will be 1 (every key) for Wheel A, 26 (every alphabet) for Wheel B, and 676 (every 26 alphabets) for Wheel C. This This handles the reciprocation - if it's not in the keyArray, it's in the swapArray.
		Replace the current letter by building a new string: the old string before the current letter, the output variable, and then the old string after the current letter.

						enigmaForward.png

		enigmaReverse
		This function is nearly identical to enigmaForward - indeed, a quality developer likely could unify these into a single function.
		The indexAdvance here is a little more complex - it has to handle rolling backwards without providing a negative result. This equation ends with the dividing the index by the wheelModulus, but subtracted. Before that is a way of "stacking more key loops" onto the key, so there are more than enough to subtract. For Wheel A, this number will be as long as the message length, which could be hundreds or thousands of letters long.
		Same setup before and same reciprocation after. Moving the indexAdvance math up above allows for an identical section here.


						EnigmaReverse.png


				var indexAdvance = Math.floor(index/wheelModulus);


		To stack these up, we're going to nest enigmaReciprocal inside itself 9 times, using 5 different keys:

		Reciprocal Front Panel cipher: enigmaReciprocal using the static Front Panel keyArray and swapArray.
		Forward Wheel A cipher: enigmaForward using the rotating Wheel A keyArray and swapArray.
		Forward Wheel B cipher: enigmaForward using the rotating Wheel B keyArray and swapArray.
		Forward Wheel C cipher: enigmaForward using the rotating Wheel C keyArray and swapArray.
		Reciprocal reversing roller cipher: enigmaReciprocal using the static reversing roller keyArray and swapArray.
		Reverse Wheel C cipher: enigmaReverse using the rotating Wheel C keyArray and swapArray.
		Reverse Wheel B cipher: enigmaReverse using the rotating Wheel B keyArray and swapArray.
		Reverse Wheel A cipher: enigmaReverse using the rotating Wheel A keyArray and swapArray.
		Reciprocal Front Panel cipher: enigmaReciprocal using the static Front Panel keyArray and swapArray.

		Arrays:
		- Front Panel
		- Wheel A
		- Wheel B
		- Wheel C
		- Hub
		Main Event:

		(Describe going through this)
		(Drawing of banana plugs inside front panel)

Part 5 - Enigma Man.

		To cap off this enigmatic journey, here is Enigma Man, a cipher which performs my Running Man cipher 9 times:

		This cipher ran 9 times is probably more secure than the 9 ciphers in Enigma, plus no key is required, just the message. Indeed, the number of encryption rotations could be viewed as a type of key. It's more secure because adding or removing a pair of letters from the end of the message changes the entire encrypted output, since removing letters shifts the midpoint of the message, which moves the first letter of the key. A downside is that message length must be even or lose a character.

		A downside to Running Man is that the message has to be split in half, either by the human transmitting the message, or the encrypting device has to be sophisticated enough to store the entire message and perform the whole process, which wasn't feasible with the state of the art of computation at the time.

https://cryptomuseum.com/crypto/enigma/d/index.htm
https://gkaccess.com/how-the-enigma-cipher-was-hacked-in-world-war-2/
https://www.nsa.gov/History/Cryptologic-History/Historical-Figures/Historical-Figures-View/Article/1621548/marian-rejewski/








